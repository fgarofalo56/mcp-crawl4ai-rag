name: Docker Build

on:
  push:
    branches: [main, develop]
    tags:
      - 'v*'
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: mcp/crawl4ai-rag:test
          build-args: |
            PORT=8051
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Create a minimal .env file for testing
          cat > .env.test << EOF
          HOST=0.0.0.0
          PORT=8051
          TRANSPORT=sse
          OPENAI_API_KEY=test-key
          SUPABASE_URL=https://test.supabase.co
          SUPABASE_SERVICE_KEY=test-key
          USE_KNOWLEDGE_GRAPH=false
          NEO4J_URI=bolt://localhost:7687
          NEO4J_USER=neo4j
          NEO4J_PASSWORD=test
          EOF

          # Start container in background
          docker run -d --name test-mcp --env-file .env.test -p 8051:8051 mcp/crawl4ai-rag:test

          # Wait for container to be ready (max 30 seconds)
          echo "Waiting for container to start..."
          for i in {1..30}; do
            if docker ps | grep -q test-mcp; then
              echo "Container is running"
              break
            fi
            sleep 1
          done

          # Check if container is still running after 5 seconds
          sleep 5
          if docker ps | grep -q test-mcp; then
            echo "✅ Container is healthy"
          else
            echo "❌ Container failed to stay running"
            docker logs test-mcp
            exit 1
          fi

          # Check logs for errors
          docker logs test-mcp 2>&1 | tee /tmp/docker-logs.txt
          if grep -i "error\|exception\|traceback" /tmp/docker-logs.txt | grep -v "No error"; then
            echo "::warning::Found errors in container logs"
          fi

          # Cleanup
          docker stop test-mcp
          docker rm test-mcp

      - name: Build and push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PORT=8051
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate build summary
        if: github.event_name != 'pull_request'
        run: |
          echo "## Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tags:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull Command:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
