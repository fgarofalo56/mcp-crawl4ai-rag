name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest]
        # Add Windows/macOS for comprehensive testing (optional, can be slow)
        include:
          - python-version: "3.12"
            os: windows-latest
          - python-version: "3.12"
            os: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Cache uv packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-${{ matrix.python-version }}-
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: |
          uv pip install --system -e ".[dev]"
          uv pip install --system pytest-cov

      - name: Run crawl4ai-setup (Linux/macOS only)
        if: runner.os != 'Windows'
        run: crawl4ai-setup
        continue-on-error: true

      - name: Run tests with coverage
        env:
          # Mock environment variables for tests
          OPENAI_API_KEY: test-key-for-ci
          SUPABASE_URL: https://test.supabase.co
          SUPABASE_SERVICE_KEY: test-key
          USE_KNOWLEDGE_GRAPH: false
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: test
        run: |
          pytest -v --cov=src --cov-report=xml --cov-report=term-missing --cov-report=html

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage HTML report
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 7

      - name: Check coverage threshold
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        run: |
          coverage report --fail-under=29 || echo "::warning::Coverage is below target threshold"
